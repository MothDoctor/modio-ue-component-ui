"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[1950],{34076:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var i=n(74848),s=n(28453);const r={id:"ue-building-a-screen",title:"Building a Simple Mod Browser from Components",slug:"/unreal/component-ui/building-a-screen/",custom_edit_url:"https://github.com/modio/modio-ue4-internal/tree/main/Plugins/ModioComponentUI/Doc/doc_root/en-us/component-ui/building_a_screen_from_components.mdx"},o=void 0,d={id:"component-ui/ue-building-a-screen",title:"Building a Simple Mod Browser from Components",description:"The majority of work involved in implementing the mod.io UI component framework will be building custom UI layouts for consuming content from mod.io by assembling components into more complex layouts.  This is a step-by-step guide demonstrating the appropriate workflow for building such a screen.",source:"@site/public/en-us/component-ui/building_a_screen_from_components.mdx",sourceDirName:"component-ui",slug:"/unreal/component-ui/building-a-screen/",permalink:"/unreal/component-ui/building-a-screen/",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-ue4-internal/tree/main/Plugins/ModioComponentUI/Doc/doc_root/en-us/component-ui/building_a_screen_from_components.mdx",tags:[],version:"current",frontMatter:{id:"ue-building-a-screen",title:"Building a Simple Mod Browser from Components",slug:"/unreal/component-ui/building-a-screen/",custom_edit_url:"https://github.com/modio/modio-ue4-internal/tree/main/Plugins/ModioComponentUI/Doc/doc_root/en-us/component-ui/building_a_screen_from_components.mdx"},sidebar:"sidebar",previous:{title:"Framework Principles",permalink:"/unreal/component-ui/principles/"},next:{title:"Substituting Components in the Template Mod Browser",permalink:"/unreal/component-ui/substitute-components/"}},l={},a=[{value:"Creating the outer <code>UserWidget</code>",id:"creating-the-outer-userwidget",level:2},{value:"Components",id:"components",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"Adding the preset filter selector",id:"adding-the-preset-filter-selector",level:2},{value:"Binding an event handler to the filter selector",id:"binding-an-event-handler-to-the-filter-selector",level:2},{value:"Implementing the bound handler and making mod queries",id:"implementing-the-bound-handler-and-making-mod-queries",level:2},{value:"Adding the mod list visualizer",id:"adding-the-mod-list-visualizer",level:2},{value:"Passing data between components",id:"passing-data-between-components",level:2},{value:"Adding components for simple text search",id:"adding-components-for-simple-text-search",level:2},{value:"Binding an event handler to the search button",id:"binding-an-event-handler-to-the-search-button",level:2},{value:"Implementing the search button event handler",id:"implementing-the-search-button-event-handler",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{TabItem:r,Tabs:o}=t;return r||u("TabItem",!0),o||u("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"The majority of work involved in implementing the mod.io UI component framework will be building custom UI layouts for consuming content from mod.io by assembling components into more complex layouts.  This is a step-by-step guide demonstrating the appropriate workflow for building such a screen."}),"\n",(0,i.jsx)(t.p,{children:"Here's the end result of this guide:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{alt:"Basic Browser In Editor",src:n(1329).A+"",width:"2557",height:"1367"}),"\n",(0,i.jsx)(t.em,{children:"A basic mod browser widget in-editor"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{alt:"Basic Browser In Game",src:n(3400).A+"",width:"2522",height:"1294"}),"\n",(0,i.jsx)(t.em,{children:"A basic mod browser widget in-game"})]}),"\n",(0,i.jsxs)(t.h2,{id:"creating-the-outer-userwidget",children:["Creating the outer ",(0,i.jsx)(t.code,{children:"UserWidget"})]}),"\n",(0,i.jsx)(t.h3,{id:"components",children:"Components"}),"\n",(0,i.jsxs)(t.p,{children:["This step involves creating an outer ",(0,i.jsx)(t.code,{children:"UserWidget"})," that will contain the different components. This widget will also handle passing messages between its components in response to user input."]}),"\n",(0,i.jsx)(t.p,{children:"The outer widget requires the following components:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"List of preset filters (Trending, Recent, and Popular) for the user to select"}),"\n",(0,i.jsx)(t.li,{children:"Search input box"}),"\n",(0,i.jsx)(t.li,{children:"Search button"}),"\n",(0,i.jsx)(t.li,{children:"List of mod tiles"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"interfaces",children:"Interfaces"}),"\n",(0,i.jsx)(t.p,{children:"Regardless of whether the logic is implemented in Blueprint or C++, the enclosing widget will need to be able to reference those components inside it. To make the layout as flexible as possible, we recommend avoiding direct references to widgets via member variables in the enclosing class."}),"\n",(0,i.jsxs)(t.p,{children:["The ideal implementation uses getter functions to return a reference to each component, typed as a ",(0,i.jsx)(t.code,{children:"UWidget"})," with a desired interface rather than the concrete widget type. This allows implementations to switch out the concrete type of the component at any time without causing Blueprint links to break. In contrast to using ",(0,i.jsx)(t.code,{children:"UPROPERTY"})," widget references with ",(0,i.jsx)(t.code,{children:"BindWidget"}),", it also allows the inner widget to live anywhere within the hierarchy \u2014 even inside a subwidget."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{alt:"Basic Browser In Game with Labels",src:n(19153).A+"",width:"2522",height:"1294"}),"\n",(0,i.jsx)(t.em,{children:"The outer widget contains 4 components.  Each component implements the relevant interface for its functionality."})]}),"\n",(0,i.jsx)(t.p,{children:"This approach is used widely in the default component implementations and the default layout template included in the mod.io Component UI plugin."}),"\n",(0,i.jsx)(t.p,{children:"Getter functions can be implemented in either C++ or Blueprint:"}),"\n",(0,i.jsxs)(o,{groupId:"languages",children:[(0,i.jsx)(r,{value:"cpp",label:"C++",default:!0,children:(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Create a C++ class deriving from ",(0,i.jsx)(t.code,{children:"UUserWidget"})]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Create the following stub functions in the widget:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"TScriptInterface<IModioUIObjectSelector> GetPresetFilterSelectorWidget() { return nullptr; }\nTScriptInterface<IModioUIModListViewInterface> GetModTileViewWidget() { return nullptr; }\nTScriptInterface<IModioUIStringInputWidget> GetSearchEditableTextBoxWidget() { return nullptr; }\nTScriptInterface<IModioUIClickableWidget> GetSearchButtonWidget() { return nullptr; }\n"})}),"\n"]}),"\n"]})}),(0,i.jsx)(r,{value:"blueprint",label:"Blueprint",children:(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Create a new Widget Blueprint in the editor"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Create the following stub functions in the widget:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Get Preset Filter Selector Widget",src:n(24175).A+"",width:"686",height:"213"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Get Mod Tile View Widget",src:n(4368).A+"",width:"686",height:"213"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Get Search Editable Text Box Widget",src:n(35303).A+"",width:"686",height:"213"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Get Search Button Widget",src:n(65423).A+"",width:"686",height:"213"})}),"\n"]}),"\n"]})})]}),"\n",(0,i.jsx)(t.h2,{id:"adding-the-preset-filter-selector",children:"Adding the preset filter selector"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"/unreal/ui-refdocs/#preset-filter-selector",children:"Preset Filter Selector"})," component presents a game-defined list of preset filter values for a user to select. These filters can be passed to any plugin function that accepts a ",(0,i.jsx)(t.code,{children:"FModioFilterParams"})," object. In this mod browser, the filter selector will be used to allow a user to quick-search. The list of preset filters is configurable via the mod.io plugin settings in the editor's ",(0,i.jsx)(t.strong,{children:"Project Settings"})," dialog."]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Add a ",(0,i.jsx)(t.code,{children:"UModioPresetFilterSelector"}),"-derived widget (such as the default ",(0,i.jsx)(t.code,{children:"WBP_ModioDefaultPresetFilterSelectorWidget"})," from the reference design) to the hierarchy of the mod browser ",(0,i.jsx)(t.code,{children:"UserWidget"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Modify ",(0,i.jsx)(t.code,{children:"GetPresetFilterSelectorWidget"})," to return a reference to the selector instance added in step 1."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Preset filter selector getter function",src:n(26781).A+"",width:"767",height:"155"})}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsxs)(t.li,{children:["Configure the preset list of filters in the ",(0,i.jsx)(t.strong,{children:"Project Settings"})," dialog:"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Preset Filters Configuration",src:n(31581).A+"",width:"931",height:"618"})}),"\n",(0,i.jsx)(t.h2,{id:"binding-an-event-handler-to-the-filter-selector",children:"Binding an event handler to the filter selector"}),"\n",(0,i.jsxs)(t.p,{children:["In order to use the selected filter parameters to search for mods, the mod browser ",(0,i.jsx)(t.code,{children:"UserWidget"})," needs to handle a ",(0,i.jsx)(t.strong,{children:"selection changed"})," event being emitted from the filter selector."]}),"\n",(0,i.jsxs)(t.p,{children:["The browser will need to provide a function with the appropriate signature, bind it to a delegate, and pass that delegate to the filter selector so that it can be invoked when the user changes their selection. The browser should access the filter selector via the getter function ",(0,i.jsx)(t.code,{children:"GetPresetFilterSelectorWidget()"})," to ensure that changing the concrete type of the filter selector will not break consuming code."]}),"\n",(0,i.jsxs)(o,{groupId:"languages",children:[(0,i.jsxs)(r,{value:"cpp",label:"C++",default:!0,children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Create a method on the ",(0,i.jsx)(t.code,{children:"UserWidget"})," class that is marked ",(0,i.jsx)(t.code,{children:"UFUNCTION()"})," and has a signature that matches ",(0,i.jsx)(t.code,{children:"FModioOnObjectSelectionChanged"}),". Note that the method does not need to be ",(0,i.jsx)(t.code,{children:"public"}),"."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"UFUNCTION()\nvoid HandlePresetFilterSelectionChanged(UObject* SelectedValue){}\n"})}),(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.code,{children:"Execute_AddSelectionChangedHandler"})," on the object returned from ",(0,i.jsx)(t.code,{children:"GetPresetFilterSelectorWidget()"})," in ",(0,i.jsx)(t.code,{children:"NativeOnInitialized"}),", and bind the event to the method created in step 1."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// UModioModBrowser is the default mod browser widget class. Replace with your own class name\nvoid UModioModBrowser::NativeOnInitialized()\n{\n   Super::NativeOnInitialized();\n   if (TScriptInterface<IModioUIObjectSelector> FilterSelector = GetPresetFilterSelectorWidget())\n   {\n   \tFModioOnObjectSelectionChanged OnPresetFilterChanged;\n   \tOnPresetFilterChanged.BindDynamic(this, &UModioModBrowser::HandlePresetFilterSelectionChanged);\n   \tFilterSelector->Execute_AddSelectionChangedHandler(FilterSelector.GetObject(), OnPresetFilterChanged);\n   }\n}\n"})})]}),(0,i.jsxs)(r,{value:"blueprint",label:"Blueprint",children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Create a new function with one input parameter of type Object."}),"\n"]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"On Preset Filter Changed",src:n(67079).A+"",width:"401",height:"215"})}),(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.code,{children:"AddSelectionChangedHandler"})," on the object returned from ",(0,i.jsx)(t.code,{children:"GetPresetFilterSelectorWidget()"})," in ",(0,i.jsx)(t.code,{children:"Event On Initialized"}),", and bind the event to the function created in step 1."]}),"\n"]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Add Selection Changed Handler",src:n(31182).A+"",width:"760",height:"455"})})]})]}),"\n",(0,i.jsx)(t.h2,{id:"implementing-the-bound-handler-and-making-mod-queries",children:"Implementing the bound handler and making mod queries"}),"\n",(0,i.jsx)(t.p,{children:"Your mod browser now has an event handler which will be executed when the user changes which filter they want to apply, but that handler currently does not have an implementation. The handler needs to retrieve the information about the selected filter and initiate a query for matching mods using the plugin."}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Preset Filter Selector"})," is a specialization of the ",(0,i.jsx)(t.a,{href:"/unreal/ui-refdocs/#object-selector",children:(0,i.jsx)(t.strong,{children:"Object Selector"})})," and will emit ",(0,i.jsx)(t.strong,{children:"Selection Changed"})," events, providing bound handlers with a ",(0,i.jsx)(t.code,{children:"UObject"})," representing the newly selected filter. The component specification requires that the ",(0,i.jsx)(t.code,{children:"UObject"})," implement the ",(0,i.jsx)(t.code,{children:"IModioModFilterUIDetails"})," interface, which allows it to be queried for the ",(0,i.jsx)(t.code,{children:"FModioFilterParams"})," that the ",(0,i.jsx)(t.code,{children:"UObject"})," represents."]}),"\n",(0,i.jsxs)(t.p,{children:["As a result, the selection changed handler can retrieve the associated ",(0,i.jsx)(t.code,{children:"FModioFilterParams"})," from the user's selection, and submit that to the mod.io REST API via the plugin to retrieve results."]}),"\n",(0,i.jsxs)(o,{groupId:"languages",children:[(0,i.jsxs)(r,{value:"cpp",label:"C++",default:!0,children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["In the handler function's implementation, call ",(0,i.jsx)(t.code,{children:"Execute_GetFilterParams"})," (from the ",(0,i.jsx)(t.code,{children:"IModioModFilterUIDetails"})," interface) on the selection object passed to the handler."]}),"\n",(0,i.jsxs)(t.li,{children:["Invoke ",(0,i.jsx)(t.code,{children:"UModioUISubsystem::RequestListAllMods"}),", passing the ",(0,i.jsx)(t.code,{children:"FilterParams"})," retrieved in step 1 and a string identifier to uniquely identify the request source. The identifier allows widgets that register for events when a new result set is available to know the originating widget and whether the event is one they should respond to."]}),"\n",(0,i.jsx)(t.li,{children:"Store the identifier in a member variable so that it can be validated against later."}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'// header .h file:\n\nFString AllParamsSearch_RequestIdentifier = TEXT("AllParamsSearch");\n'})}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// implementation .cpp file:\n// UModioModBrowser is just a placeholder class name. Replace with your own class name\n\nvoid UModioModBrowser::OnPresetFilterChanged(UObject* SelectedValue)\n{\n   if (SelectedValue.GetClass()->ImplementsInterface(UModioModFilterUIDetails::StaticClass()))\n   {\n   \tFModioFilterParams FilterParams = FilterDetails->Execute_GetFilterParams(SelectedValue);\n   \tif (UModioUISubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioUISubsystem>())\n   \t{\n   \t\tSubsystem->RequestListAllMods(FilterParams, AllParamsSearch_RequestIdentifier);\n   \t}\n   }\n}\n"})})]}),(0,i.jsxs)(r,{value:"blueprint",label:"Blueprint",children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["In the handler function's implementation, call ",(0,i.jsx)(t.code,{children:"GetFilterParams"})," message function on the selection object passed to the handler."]}),"\n",(0,i.jsxs)(t.li,{children:["Invoke ",(0,i.jsx)(t.code,{children:"RequestListAllMods"})," from Modio UI Subsystem and pass the FilterParams retrieved in step 1, and a string identifier to uniquely identify the request source. The identifier allows widgets that register for events when a new result set is available, to know the originating widget and whether the event is one they should respond to."]}),"\n",(0,i.jsx)(t.li,{children:"Store the identifier in a member variable so that it can be validated against later."}),"\n"]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"On Preset Filter Changed Implementation",src:n(39274).A+"",width:"1405",height:"374"})})]})]}),"\n",(0,i.jsx)(t.h2,{id:"adding-the-mod-list-visualizer",children:"Adding the mod list visualizer"}),"\n",(0,i.jsxs)(t.p,{children:["The mod browser requires some widget that is able to visualize or display the results of the filter that was used in the query. The ",(0,i.jsx)(t.code,{children:"IModioUIModListViewInterface"})," interface was designed specifically for implementation by widgets that are capable of such visualization, and one of the default implementations of this interface supplied by the plugin is ",(0,i.jsx)(t.code,{children:"UModioDefaultModTileView"}),"."]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Add a ",(0,i.jsx)(t.code,{children:"ModioDefaultModTileView"})," to the widget's hierarchy, and alter the implementation of ",(0,i.jsx)(t.code,{children:"GetModTileViewWidget"})," so that it returns a reference to the widget in question. Alternatively, use a ",(0,i.jsx)(t.code,{children:"UModioDefaultModListView"})," to display the mods as a vertical or horizontal list instead of a grid."]}),"\n",(0,i.jsxs)(t.li,{children:["Specify the Entry Widget class to use for the tile view, such as the default ",(0,i.jsx)(t.code,{children:"WBP_ModioDefaultModTile"})," from the reference design, which is derived from ",(0,i.jsx)(t.code,{children:"UModioDefaultModTile"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"passing-data-between-components",children:"Passing data between components"}),"\n",(0,i.jsx)(t.p,{children:"Now that the mod browser is requesting search results via the mod.io plugin, it needs to consume those results as they become available."}),"\n",(0,i.jsxs)(t.p,{children:["The mod.io UI framework provides a number of interface classes that widgets can implement in order to register as event receivers for different sorts of async events, such as the user's subscriptions changing, or to be notified when a set of search results have been fetched.\nIn this instance, the mod browser must implement ",(0,i.jsx)(t.code,{children:"IModioUIModInfoReceiver"}),", which is an interface indicating that the implementing widget wants to receive notifications/events when the mod.io subsystem returns a set of mod info objects (list of mods) from the REST API."]}),"\n",(0,i.jsxs)(t.p,{children:["Once that interface is implemented, the widget can register to receive events when a set of mod objects are returned. Registering for these events automatically binds functions on the implementing widget to delegates inside the ",(0,i.jsx)(t.code,{children:"UModioUISubsystem"}),", so it will receive callbacks when results are available. Then, when the widget receives the event indicating the results have been fetched, it can pass those mod objects onto the widget returned from ",(0,i.jsx)(t.code,{children:"GetModTileViewWidget"})," for display."]}),"\n",(0,i.jsxs)(o,{groupId:"languages",children:[(0,i.jsxs)(r,{value:"cpp",label:"C++",default:!0,children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Modify the mod browser widget so that it inherits from ",(0,i.jsx)(t.code,{children:"IModioUIModInfoReceiver"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["In ",(0,i.jsx)(t.code,{children:"NativePreConstruct"}),", invoke ",(0,i.jsx)(t.code,{children:"IModioUIModInfoReceiver::Register"}),"."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// header .h file:\n\nvirtual void NativePreConstruct() override;\n"})}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// implementation .cpp file:\n// UModioModBrowser is just a placeholder class name. Replace with your own class name\n\nvoid UModioModBrowser::NativePreConstruct()\n{\n   Super::NativePreConstruct();\n   IModioUIModInfoReceiver::Register<UModioModBrowser>(EModioUIModInfoEventType::ListAllMods);\n}\n"})}),(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsxs)(t.li,{children:["Implement the event handler for ",(0,i.jsx)(t.code,{children:"ListAllMods"})," to return a result by overriding ",(0,i.jsx)(t.code,{children:"NativeOnListAllModsRequestCompleted"}),"."]}),"\n",(0,i.jsx)(t.li,{children:"In the event handler, validate the request identifier against the one stored earlier when the request was made."}),"\n",(0,i.jsx)(t.li,{children:"Handle the error code if it is populated, as well as the case where the list of mods is not set."}),"\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.code,{children:"Execute_SetModsFromModInfoList"})," function on the widget returned by ",(0,i.jsx)(t.code,{children:"GetModTileViewWidget()"})," (",(0,i.jsx)(t.code,{children:"IModioUIModListViewInterface"})," interface)."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// header .h file:\n\nvirtual void NativeOnListAllModsRequestCompleted(FString RequestIdentifier, FModioErrorCode ErrorCode, TOptional<FModioModInfoList> List);\n"})}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'// implementation .cpp file:\n// UModioModBrowser is just a placeholder class name. Replace with your own class name\n\nvoid UModioModBrowser::NativeOnListAllModsRequestCompleted(FString RequestIdentifier, FModioErrorCode ErrorCode, TOptional<FModioModInfoList> List)\n{\n   IModioUIModInfoReceiver::NativeOnListAllModsRequestCompleted(RequestIdentifier, ErrorCode, List);\n\n   // Optional check if the request identifier matches the one we used\n   if (AllParamsSearch_RequestIdentifier != RequestIdentifier)\n   {\n   \treturn;\n   }\n\n   // Check if the request was successful and the list of mods is set/valid\n   if (ErrorCode || !List.IsSet())\n   {\n       UE_LOG(LogTemp, Error, TEXT("Error fetching mods: %s"), *ErrorCode.GetErrorMessage());\n   \treturn;\n   }\n\n   // Set the mods on the mod tile view widget\n   if (UWidget* ModTileWidget = ModioUI::GetInterfaceWidgetChecked(GetModTileViewWidget()))\n   {\n   \tIModioUIModListViewInterface::Execute_SetModsFromModInfoList(ModTileWidget, List.GetValue(), false);\n   }\n}\n'})})]}),(0,i.jsxs)(r,{value:"blueprint",label:"Blueprint",children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["In your Widget Blueprint's ",(0,i.jsx)(t.strong,{children:"Class Settings"}),", add ",(0,i.jsx)(t.code,{children:"ModioUIModInfoReceiver"})," as an implemented interface."]}),"\n",(0,i.jsxs)(t.li,{children:["In ",(0,i.jsx)(t.code,{children:"PreConstruct"}),", invoke ",(0,i.jsx)(t.code,{children:"RegisterModInfoReceiver()"})," (if it is not already called in the parent class)."]}),"\n"]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Register Mod Info Receiver",src:n(29973).A+"",width:"849",height:"261"})}),(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsxs)(t.li,{children:["Implement the event handler for ",(0,i.jsx)(t.code,{children:"ListAllMods"})," to return a result by overriding ",(0,i.jsx)(t.code,{children:"OnListAllModsRequestCompleted"}),"."]}),"\n",(0,i.jsx)(t.li,{children:"In the event handler, validate the request identifier against the one stored earlier when the request was made."}),"\n",(0,i.jsx)(t.li,{children:"Handle the error code if it is populated, as well as the case where the list of mods is not set."}),"\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.code,{children:"SetModsFromModInfoList"})," function on the widget returned by ",(0,i.jsx)(t.code,{children:"GetModTileViewWidget()"})," (",(0,i.jsx)(t.code,{children:"ModioUIModInfoReceiver"})," interface)."]}),"\n"]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Native On List All Mods Request Completed",src:n(56801).A+"",width:"2280",height:"741"})})]})]}),"\n",(0,i.jsx)(t.h2,{id:"adding-components-for-simple-text-search",children:"Adding components for simple text search"}),"\n",(0,i.jsx)(t.p,{children:"To perform simple text search the mod browser widget requires two more sub-widgets: one for entering text, and the other for submitting the search text and retrieving results."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Add a ",(0,i.jsx)(t.code,{children:"ModioDefaultEditableTextBox"})," to the browser's hierarchy."]}),"\n",(0,i.jsxs)(t.li,{children:["Modify ",(0,i.jsx)(t.code,{children:"GetSearchEditableTextBoxWidget"})," to return a reference to the editable text box."]}),"\n",(0,i.jsxs)(t.li,{children:["Add a ",(0,i.jsx)(t.code,{children:"ModioDefaultButton"})," to the browser's hierarchy."]}),"\n",(0,i.jsx)(t.li,{children:"Configure the default properties on the button so that the button's label is set to the required value."}),"\n",(0,i.jsxs)(t.li,{children:["Modify ",(0,i.jsx)(t.code,{children:"GetSearchButton"})," to return a reference to the new button."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"binding-an-event-handler-to-the-search-button",children:"Binding an event handler to the search button"}),"\n",(0,i.jsxs)(t.p,{children:["In similar fashion to the preset filter selector earlier, ",(0,i.jsx)(t.code,{children:"ModioDefaultButton"})," implements ",(0,i.jsx)(t.code,{children:"IModioUIClickableWidget"}),'. In order to submit a search, the mod browser will need to add a handler for the "Clicked" event emitted by the search button.']}),"\n",(0,i.jsxs)(o,{groupId:"languages",children:[(0,i.jsxs)(r,{value:"cpp",label:"C++",default:!0,children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Create a method on the ",(0,i.jsx)(t.code,{children:"UserWidget"})," class that is marked ",(0,i.jsx)(t.code,{children:"UFUNCTION()"})," and has a signature that matches ",(0,i.jsx)(t.code,{children:"FModioClickableOnClicked"}),"."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"UFUNCTION()\nvoid HandleSearchButtonClicked(UObject* ClickContext){}\n"})}),(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.code,{children:"Execute_AddClickedHandler"})," on the object returned from ",(0,i.jsx)(t.code,{children:"GetSearchButtonWidget()"}),", in ",(0,i.jsx)(t.code,{children:"NativeOnInitialized"}),", and bind the event to the method created in step 1."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// UModioModBrowser is just a placeholder class name. Replace with your own class name\n\nvoid UModioModBrowser::NativeOnInitialized()\n{\n   Super::NativeOnInitialized();\n   if (UWidget* SearchButtonWidget = ModioUI::GetInterfaceWidgetChecked(GetSearchButtonWidget()))\n   {\n   \tFModioClickableOnClicked OnSearchButtonClicked;\n   \tOnSearchButtonClicked.BindDynamic(this, &UModioModBrowser::HandleSearchButtonClicked);\n   \tIModioUIClickableWidget::Execute_AddClickedHandler(SearchButtonWidget, OnSearchButtonClicked);\n   }\n}\n"})})]}),(0,i.jsxs)(r,{value:"blueprint",label:"Blueprint",children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Create a new function with one input parameter of type Object."}),"\n"]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"On Search Button Clicked",src:n(69321).A+"",width:"401",height:"215"})}),(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.code,{children:"AddClickedHandler"})," on the object returned from ",(0,i.jsx)(t.code,{children:"GetSearchButtonWidget()"}),", in ",(0,i.jsx)(t.code,{children:"OnInitialized"}),", and bind the event to the function created in step 1."]}),"\n"]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Add Clicked Handler",src:n(9431).A+"",width:"741",height:"458"})})]})]}),"\n",(0,i.jsx)(t.h2,{id:"implementing-the-search-button-event-handler",children:"Implementing the search button event handler"}),"\n",(0,i.jsxs)(t.p,{children:["Now that the mod browser is handling the clicked event from the search button, the user's search string needs to be retrieved and submitted to the mod.io plugin as a filter for ",(0,i.jsx)(t.code,{children:"ListAllModsAsync"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ModioDefaultEditableTextBox"})," created earlier meets the requirements of the EditableText component, by implementing ",(0,i.jsx)(t.code,{children:"IModioUIStringInputWidget"}),". This interface allows the implementing widget to be queried for some kind of string representing user input."]}),"\n",(0,i.jsxs)(t.p,{children:["Once the user's input is retrieved from the text box, it can be incorporated into a set of ",(0,i.jsx)(t.code,{children:"FModioFilterParams"})," and submitted."]}),"\n",(0,i.jsxs)(o,{groupId:"languages",children:[(0,i.jsxs)(r,{value:"cpp",label:"C++",default:!0,children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Inside the handler bound in the previous step (",(0,i.jsx)(t.code,{children:"OnSearchButtonClicked"}),"), Call ",(0,i.jsx)(t.code,{children:"GatherInput"})," on the widget returned by ",(0,i.jsx)(t.code,{children:"GetSearchEditableTextBoxWidget"})," and store the resulting string."]}),"\n",(0,i.jsxs)(t.li,{children:["Create an ",(0,i.jsx)(t.code,{children:"FModioFilterParams"})," object, and use the ",(0,i.jsx)(t.code,{children:"NameContains"})," function on it, passing the string returned by ",(0,i.jsx)(t.code,{children:"Execute_GatherInput"})," from the ",(0,i.jsx)(t.code,{children:"IModioUIStringInputWidget"})," interface."]}),"\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.code,{children:"UModioUISubsystem::RequestListAllMods"})," as earlier, passing a request ID."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// UModioModBrowser is just a placeholder class name. Replace with your own class name\n\nvoid UModioModBrowser::OnSearchButtonClicked(UObject* ClickContext)\n{\n   if (UWidget* SearchButtonWidget = ModioUI::GetInterfaceWidgetChecked(GetSearchEditableTextBoxWidget()))\n   {\n   \tFString GatheredInput = IModioUIStringInputWidget::Execute_GatherInput(SearchButtonWidget);\n   \tFModioFilterParams FilterParams; // Can be replaced with the filter returned from OnPresetFilterChanged\n   \tFilterParams.NameContains(GatheredInput);\n   \tif (UModioUISubsystem* Subsystem = GEngine->GetEngineSubsystem<UModioUISubsystem>())\n   \t{\n   \t\tSubsystem->RequestListAllMods(FilterParams, RequestIdentifier);\n   \t}\n   }\n}\n"})})]}),(0,i.jsxs)(r,{value:"blueprint",label:"Blueprint",children:[(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Inside the handler bound in the previous step (",(0,i.jsx)(t.code,{children:"OnSearchButtonClicked"}),"), Call ",(0,i.jsx)(t.code,{children:"GatherInput"})," on the widget returned by ",(0,i.jsx)(t.code,{children:"GetSearchEditableTextBoxWidget"})," and store the resulting string."]}),"\n",(0,i.jsxs)(t.li,{children:["Create an ",(0,i.jsx)(t.code,{children:"FModioFilterParams"})," object, and use the ",(0,i.jsx)(t.code,{children:"NameContains"})," function on it, passing the string returned by ",(0,i.jsx)(t.code,{children:"GatherInput"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.code,{children:"RequestListAllMods"})," as earlier, passing a request ID."]}),"\n"]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"On Search Button Clicked Implementation",src:n(93808).A+"",width:"1903",height:"442"})})]})]}),"\n",(0,i.jsxs)(t.p,{children:["Note there is no need to create another handler for the ",(0,i.jsx)(t.code,{children:"ListAllModsCompleted"})," event; the existing handler will be invoked for both preset filter requests and user search string requests."]}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(t.p,{children:"The mod.io functionality for a basic mod browser widget is now complete.  You may apply any layout and styling changes as desired \u2014 our example makes use of a background border, horizontal and vertical boxes, and in-built sizing and padding options found in the details panel of each sub-component."}),"\n",(0,i.jsxs)(t.p,{children:["Once you are satisfied with your simple mod browser, initialize the mod.io plugin using your game's API key and Game ID, and add your new widget to the viewport to search and browse mods. Please refer to the ",(0,i.jsx)(t.a,{href:"https://docs.mod.io/unreal/getting-started/",children:"Getting Started"})," section of the core mod.io Unreal Engine plugin for further information."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},9431:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-AddClickedHandler-6e03941432f1868f458cadc6abc5914f.png"},31182:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-AddSelectionChangedHandler-385e24e8d261d8291fe6cadeadb9a4ec.png"},4368:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-GetModTileViewWidget-e128e2ce86eaba0f97171368c366d415.png"},24175:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-GetPresetFilterSelectorWidget-eb4c7c8a127396b711b6804b0d382a51.png"},65423:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-GetSearchButtonWidget-070b73fb88724c9620ae028b1a104f8b.png"},35303:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-GetSearchEditableTextBoxWidget-618adce9d68e300eb1db96434fdacd54.png"},1329:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-InEditor-21be8bab53a599f69db3256439c39905.png"},3400:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-InGame-c8891773375078a490a1e2553ea68f49.png"},19153:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-InGameLabelled-02ff03137e7c590362a4f7a4546d8fda.png"},56801:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-NativeOnListAllModsRequestCompleted-aa292a7b6da9d0028dfe8047af727384.png"},67079:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-OnPresetFilterChanged-0a46e50d795a2ccf171b47dc3b6f1d39.png"},39274:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-OnPresetFilterChanged_Implementation-d9d11fe49db2be09cf38b43d3f092ad6.png"},69321:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-OnSearchButtonClicked-a4e3e9ccd6f518deb84cd642a7e09132.png"},93808:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-OnSearchButtonClicked_Implementation-c2fcf625f5adb43e98febbe7c75be6e9.png"},26781:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-PresetFilterGetter-98a5047a35552734667d5973b2f1fab8.png"},31581:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-Preset_Filters_Configuration-b68bb80b303b08f65ed39b9d836e0e37.png"},29973:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/browser-RegisterModInfoReceiver-a3d20dfe1211bd5404949483af213cc1.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);